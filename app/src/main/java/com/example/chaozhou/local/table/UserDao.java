package com.example.chaozhou.local.table;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, long.class, "uid", true, "_id");
        public final static Property Uname = new Property(1, String.class, "uname", false, "UNAME");
        public final static Property Phonenumber = new Property(2, String.class, "phonenumber", false, "PHONENUMBER");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(6, int.class, "age", false, "AGE");
        public final static Property Head = new Property(7, String.class, "head", false, "HEAD");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: uid
                "\"UNAME\" TEXT," + // 1: uname
                "\"PHONENUMBER\" TEXT NOT NULL ," + // 2: phonenumber
                "\"PASSWORD\" TEXT," + // 3: password
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"SEX\" TEXT," + // 5: sex
                "\"AGE\" INTEGER NOT NULL ," + // 6: age
                "\"HEAD\" TEXT);"); // 7: head
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(2, uname);
        }
        stmt.bindString(3, entity.getPhonenumber());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
        stmt.bindLong(7, entity.getAge());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(8, head);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(2, uname);
        }
        stmt.bindString(3, entity.getPhonenumber());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
        stmt.bindLong(7, entity.getAge());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(8, head);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uname
            cursor.getString(offset + 2), // phonenumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.getInt(offset + 6), // age
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // head
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUid(cursor.getLong(offset + 0));
        entity.setUname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhonenumber(cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.getInt(offset + 6));
        entity.setHead(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
